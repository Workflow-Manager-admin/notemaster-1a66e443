{"is_source_file": true, "format": "Python", "description": "This file provides JWT and OAuth2 authentication utilities for the notes app, including password hashing, verification, token creation, and current user retrieval.", "external_files": ["from .database import get_db", "from .models import User", "from .schemas import TokenData"], "external_methods": ["get_db", "User", "TokenData", "jwt.encode", "jwt.decode", "db.query", "db.filter", "db.first", "load_dotenv", "verify_password", "hash", "Status.HTTP_401_UNAUTHORIZED", "HTTPException"], "published": ["verify_password", "get_password_hash", "authenticate_user", "create_access_token", "get_current_user", "get_current_active_user"], "classes": [], "methods": [{"name": "verify_password(plain_password, hashed_password)", "description": "Check a password against its hash.", "scope": "", "scopeKind": ""}, {"name": "get_password_hash(password)", "description": "Hash a password.", "scope": "", "scopeKind": ""}, {"name": "Optional[User] authenticate_user(db: Session, username: str, password: str)", "description": "Return user if username/password is valid, else None.", "scope": "", "scopeKind": ""}, {"name": "create_access_token(data: dict, expires_delta: Optional[timedelta] = None)", "description": "Encode data as JWT, include expiry.", "scope": "", "scopeKind": ""}, {"name": "User get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db))", "description": "Return the user for the JWT token, or raise 401.", "scope": "", "scopeKind": ""}, {"name": "get_current_active_user(current_user: User = Depends(get_current_user))", "description": "For future extension: block disabled users, etc.", "scope": "", "scopeKind": ""}], "calls": ["jwt.encode", "jwt.decode", "db.query", "db.filter", "load_dotenv", "verify_password", "hash", "HTTPException"], "search-terms": ["jwt", "OAuth2", "TokenData", "auth", "password hashing"], "state": 2, "file_id": 11, "knowledge_revision": 24, "git_revision": "", "ctags": [{"_type": "tag", "name": "ACCESS_TOKEN_EXPIRE_MINUTES", "path": "/home/kavia/workspace/code-generation/notemaster-1a66e443/notes_backend/src/api/auth.py", "pattern": "/^ACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv(\"ACCESS_TOKEN_EXPIRE_MINUTES\", 60))$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "ALGORITHM", "path": "/home/kavia/workspace/code-generation/notemaster-1a66e443/notes_backend/src/api/auth.py", "pattern": "/^ALGORITHM = \"HS256\"$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "SECRET_KEY", "path": "/home/kavia/workspace/code-generation/notemaster-1a66e443/notes_backend/src/api/auth.py", "pattern": "/^SECRET_KEY = os.getenv(\"JWT_SECRET_KEY\", \"supersecretkey\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "authenticate_user", "path": "/home/kavia/workspace/code-generation/notemaster-1a66e443/notes_backend/src/api/auth.py", "pattern": "/^def authenticate_user(db: Session, username: str, password: str) -> Optional[User]:$/", "language": "Python", "typeref": "typename:Optional[User]", "kind": "function", "signature": "(db: Session, username: str, password: str)"}, {"_type": "tag", "name": "create_access_token", "path": "/home/kavia/workspace/code-generation/notemaster-1a66e443/notes_backend/src/api/auth.py", "pattern": "/^def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):$/", "language": "Python", "kind": "function", "signature": "(data: dict, expires_delta: Optional[timedelta] = None)"}, {"_type": "tag", "name": "get_current_active_user", "path": "/home/kavia/workspace/code-generation/notemaster-1a66e443/notes_backend/src/api/auth.py", "pattern": "/^def get_current_active_user(current_user: User = Depends(get_current_user)):$/", "language": "Python", "kind": "function", "signature": "(current_user: User = Depends(get_current_user))"}, {"_type": "tag", "name": "get_current_user", "path": "/home/kavia/workspace/code-generation/notemaster-1a66e443/notes_backend/src/api/auth.py", "pattern": "/^def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)) -> User/", "language": "Python", "typeref": "typename:User", "kind": "function", "signature": "(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db))"}, {"_type": "tag", "name": "get_password_hash", "path": "/home/kavia/workspace/code-generation/notemaster-1a66e443/notes_backend/src/api/auth.py", "pattern": "/^def get_password_hash(password):$/", "language": "Python", "kind": "function", "signature": "(password)"}, {"_type": "tag", "name": "oauth2_scheme", "path": "/home/kavia/workspace/code-generation/notemaster-1a66e443/notes_backend/src/api/auth.py", "pattern": "/^oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"\\/auth\\/token\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "pwd_context", "path": "/home/kavia/workspace/code-generation/notemaster-1a66e443/notes_backend/src/api/auth.py", "pattern": "/^pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "verify_password", "path": "/home/kavia/workspace/code-generation/notemaster-1a66e443/notes_backend/src/api/auth.py", "pattern": "/^def verify_password(plain_password, hashed_password):$/", "language": "Python", "kind": "function", "signature": "(plain_password, hashed_password)"}], "hash": "af459d86cef8377fba35acc4d84fbeb7", "format-version": 4, "code-base-name": "notes_backend", "filename": "notes_backend/src/api/auth.py", "fields": [{"name": "ACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv(\"ACCESS_TOKEN_EXPIRE_MINUTES\", 60))", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "ALGORITHM = \"HS256\"", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "SECRET_KEY = os.getenv(\"JWT_SECRET_KEY\", \"supersecretkey\")", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"\\/auth\\/token\")", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"24": ""}]}