{"is_source_file": true, "format": "Python", "description": "The provided file appears to be a FastAPI-based backend application for a notes application. It defines API endpoints for health checks, user registration, authentication, user profile retrieval, and CRUD operations for notes. The file includes route handlers, middleware configurations, and references to models, schemas, and authentication utility functions.", "external_files": ["models", "database", "schemas", "auth"], "external_methods": ["get_password_hash", "authenticate_user", "create_access_token", "get_current_user", "get_current_active_user", "Base.metadata.create_all", "engine", "get_db"], "published": ["app"], "classes": [{"name": "FastAPI", "description": "The main FastAPI application instance configured with title, description, version, and tags."}], "methods": [{"name": "on_startup()", "description": "Initializes database tables at application startup.", "scope": "", "scopeKind": ""}, {"name": "health_check()", "description": "Health check endpoint returning status message.", "scope": "", "scopeKind": ""}, {"name": "register(user_in: UserCreate, db: Session = Depends(get_db))", "description": "Registers a new user with username, email, and password.", "scope": "", "scopeKind": ""}, {"name": "login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db))", "description": "Authenticates user credentials and returns JWT token.", "scope": "", "scopeKind": ""}, {"name": "read_users_me( current_user: User = Depends(get_current_active_user) )", "description": "Retrieves current authenticated user's profile.", "scope": "", "scopeKind": ""}, {"name": "create_note( note_in: NoteCreate, db: Session = Depends(get_db), current_user: User = Depends(get_current_active_user) )", "description": "Creates a new note for the current user.", "scope": "", "scopeKind": ""}, {"name": "list_notes( db: Session = Depends(get_db), current_user: User = Depends(get_current_active_user), q: Optional[str] = Query(None, description=\"Search query for titles\"), sort: Optional[str] = Query(\"created\", description=\"Sort by (created/title, prefix with '-' for descending)\"), limit: int = Query(20, gt=0, le=100) )", "description": "Lists notes with optional search, filtering, and sorting.", "scope": "", "scopeKind": ""}, {"name": "get_note( note_id: int = Path(..., title=\"The ID of the note\"), db: Session = Depends(get_db), current_user: User = Depends(get_current_active_user), )", "description": "Retrieves a specific note owned by current user.", "scope": "", "scopeKind": ""}, {"name": "update_note( note_id: int, note_in: NoteUpdate = Body(...), db: Session = Depends(get_db), current_user: User = Depends(get_current_active_user), )", "description": "Updates an existing note owned by current user.", "scope": "", "scopeKind": ""}, {"name": "delete_note( note_id: int, db: Session = Depends(get_db), current_user: User = Depends(get_current_active_user), )", "description": "Deletes a note owned by current user.", "scope": "", "scopeKind": ""}], "calls": ["Base.metadata.create_all", "app.on_event", "app.get", "app.post", "app.put", "app.delete", "db.query", "db.add", "db.commit", "db.refresh", "db.delete", "raise HTTPException"], "search-terms": ["FastAPI", "notes CRUD", "user registration", "JWT token", "OAuth2PasswordRequestForm", "health check endpoint", "notes filtering", "database models", "CORS middleware"], "state": 2, "file_id": 1, "knowledge_revision": 25, "git_revision": "b5eeecec60f74316505ab27c93422d12efebb54b", "revision_history": [{"8": "bf6b26c630f7c1946f208d92c6a7426e4cc053a2"}, {"20": "b5eeecec60f74316505ab27c93422d12efebb54b"}, {"25": "b5eeecec60f74316505ab27c93422d12efebb54b"}], "ctags": [{"_type": "tag", "name": "app", "path": "/home/kavia/workspace/code-generation/notemaster-1a66e443/notes_backend/src/api/main.py", "pattern": "/^app = FastAPI($/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "create_note", "path": "/home/kavia/workspace/code-generation/notemaster-1a66e443/notes_backend/src/api/main.py", "pattern": "/^def create_note($/", "language": "Python", "kind": "function", "signature": "( note_in: NoteCreate, db: Session = Depends(get_db), current_user: User = Depends(get_current_active_user) )"}, {"_type": "tag", "name": "delete_note", "path": "/home/kavia/workspace/code-generation/notemaster-1a66e443/notes_backend/src/api/main.py", "pattern": "/^def delete_note($/", "language": "Python", "kind": "function", "signature": "( note_id: int, db: Session = Depends(get_db), current_user: User = Depends(get_current_active_user), )"}, {"_type": "tag", "name": "get_note", "path": "/home/kavia/workspace/code-generation/notemaster-1a66e443/notes_backend/src/api/main.py", "pattern": "/^def get_note($/", "language": "Python", "kind": "function", "signature": "( note_id: int = Path(..., title=\"The ID of the note\"), db: Session = Depends(get_db), current_user: User = Depends(get_current_active_user), )"}, {"_type": "tag", "name": "health_check", "path": "/home/kavia/workspace/code-generation/notemaster-1a66e443/notes_backend/src/api/main.py", "pattern": "/^def health_check():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "list_notes", "path": "/home/kavia/workspace/code-generation/notemaster-1a66e443/notes_backend/src/api/main.py", "pattern": "/^def list_notes($/", "language": "Python", "kind": "function", "signature": "( db: Session = Depends(get_db), current_user: User = Depends(get_current_active_user), q: Optional[str] = Query(None, description=\"Search query for titles\"), sort: Optional[str] = Query(\"created\", description=\"Sort by (created/title, prefix with '-' for descending)\"), limit: int = Query(20, gt=0, le=100) )"}, {"_type": "tag", "name": "login_for_access_token", "path": "/home/kavia/workspace/code-generation/notemaster-1a66e443/notes_backend/src/api/main.py", "pattern": "/^def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depen/", "language": "Python", "kind": "function", "signature": "(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db))"}, {"_type": "tag", "name": "on_startup", "path": "/home/kavia/workspace/code-generation/notemaster-1a66e443/notes_backend/src/api/main.py", "pattern": "/^def on_startup():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "read_users_me", "path": "/home/kavia/workspace/code-generation/notemaster-1a66e443/notes_backend/src/api/main.py", "pattern": "/^def read_users_me($/", "language": "Python", "kind": "function", "signature": "( current_user: User = Depends(get_current_active_user) )"}, {"_type": "tag", "name": "register", "path": "/home/kavia/workspace/code-generation/notemaster-1a66e443/notes_backend/src/api/main.py", "pattern": "/^def register(user_in: UserCreate, db: Session = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(user_in: UserCreate, db: Session = Depends(get_db))"}, {"_type": "tag", "name": "update_note", "path": "/home/kavia/workspace/code-generation/notemaster-1a66e443/notes_backend/src/api/main.py", "pattern": "/^def update_note($/", "language": "Python", "kind": "function", "signature": "( note_id: int, note_in: NoteUpdate = Body(...), db: Session = Depends(get_db), current_user: User = Depends(get_current_active_user), )"}], "hash": "63017e1aa1fa89590c34fda6bf0d71da", "format-version": 4, "code-base-name": "notes_backend", "filename": "notes_backend/src/api/main.py", "fields": [{"name": "app = FastAPI(", "scope": "", "scopeKind": "", "description": "unavailable"}]}